#!/usr/bin/python

'''
Code used to plot grib data
'''

import pygrib
from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.animation as animation
from mpl_toolkits.basemap import shiftgrid
import os
import re


os.chdir("/home/gloria/the-python-space-adventure/pollutants/20180919/o3")
grib='z_cams_c_ecmf_20180919000000_prod_fc_ml_000_go3.grib' # Set the file name of your input GRIB file
grbs=pygrib.open(grib)

grb = grbs.select()[59]
data=grb.values

lons = np.linspace(float(grb['longitudeOfFirstGridPointInDegrees']), \
float(grb['longitudeOfLastGridPointInDegrees']), int(grb['Ni']) )
lats = np.linspace(float(grb['latitudeOfFirstGridPointInDegrees']), \
float(grb['latitudeOfLastGridPointInDegrees']), int(grb['Nj']) )
data, lons = shiftgrid(180., data, lons, start=False)


m=Basemap(projection='cyl', llcrnrlon=-180, \
  urcrnrlon=180.,llcrnrlat=lats.min(),urcrnrlat=lats.max(), \
  resolution='c')

grid_lon, grid_lat = np.meshgrid(lons, lats) #regularly spaced 2D grid
x, y = m(grid_lon, grid_lat)

plt.figure(figsize=(30,21))
m.drawcoastlines()
m.drawmapboundary()
m.drawmeridians(np.arange(-180.,180.,60.))
m.drawparallels(np.arange(-90, 90, 30))

cmap = plt.get_cmap('coolwarm')
cs = m.pcolormesh(x,y,data,shading='flat',cmap=cmap)
plt.colorbar(cs,orientation='horizontal', shrink=0.5, label = "VALUES")

time = re.findall('(time [a-z0-9: ]*)', str(grb))
title = "Ozone values for day " + time[0]
font = {'family': 'serif',
        'color':  'black',
        'weight': 'normal',
        'size': 24,
        }

plt.title(title, fontdict = font)


plt.show()

plt.figure(figsize=(15,10))
numbers = re.compile(r'(\d+)')
def numericalSort(value):
    parts = numbers.split(value)
    parts[1::2] = map(int, parts[1::2])
    return parts

griblist = os.listdir("/home/gloria/the-python-space-adventure/pollutants/20180919/o3")
levelist = []
for grb in sorted(griblist, key=numericalSort):
    grbs=pygrib.open(grb)
    for grb in grbs: levelist.append(grb)


grib='z_cams_c_ecmf_20180919000000_prod_fc_ml_000_go3.grib' # Set the file name of your input GRIB file
grbs=pygrib.open(grib)
for grb in grbs: grb

grb = grbs.select()[59]
data2=grb.values



lons = np.linspace(float(grb['longitudeOfFirstGridPointInDegrees']), \
float(grb['longitudeOfLastGridPointInDegrees']), int(grb['Ni']) )
lats = np.linspace(float(grb['latitudeOfFirstGridPointInDegrees']), \
float(grb['latitudeOfLastGridPointInDegrees']), int(grb['Nj']) )
data2, lons = shiftgrid(180., data2, lons, start=False)

m = Basemap(projection='cyl', llcrnrlon=-180, \
    urcrnrlon=180.,llcrnrlat=lats.min(),urcrnrlat=lats.max(), \
    resolution='c')

m.drawcoastlines()
m.drawmapboundary()
m.drawmeridians(np.arange(-180.,180.,60.))
m.drawparallels(np.arange(-90, 90, 30))

grid_lon, grid_lat = np.meshgrid(lons, lats) #regularly spaced 2D grid
x, y = m(grid_lon, grid_lat)

cmap = plt.get_cmap('coolwarm')
cs = m.pcolormesh(x,y,data2,shading='flat',cmap=cmap)
plt.colorbar(cs,orientation='horizontal', shrink=0.5, label = "VALUES")

def animate (i):
    grb = levelist[i]
    lons = np.linspace(float(grb['longitudeOfFirstGridPointInDegrees']), \
    float(grb['longitudeOfLastGridPointInDegrees']), int(grb['Ni']) )
    lats = np.linspace(float(grb['latitudeOfFirstGridPointInDegrees']), \
    float(grb['latitudeOfLastGridPointInDegrees']), int(grb['Nj']) )

    data = grb.values
    data, lons = shiftgrid(180., data, lons, start=False)
    grid_lon, grid_lat = np.meshgrid(lons, lats) #regularly spaced 2D grid
    x, y = m(grid_lon, grid_lat)
    cmap = plt.get_cmap('coolwarm')
    cs = m.pcolormesh(x,y,data,shading='flat',cmap=cmap)
    time = re.findall('(time [0-9]*)', str(grb))
    time2 = re.findall('(time [a-z0-9: ]*)', str(grb))
    title = "O3 level for day " + time2[0]
    plt.title(title, fontdict = font)

anim = animation.FuncAnimation(plt.gcf(), animate,
                               frames=len(levelist), interval=250)

anim.save('animation_o3.gif', writer='imagemagick')


plt.show()
